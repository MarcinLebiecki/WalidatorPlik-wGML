# -*- coding: utf-8 -*-
"""
/***************************************************************************
 walidatorPlikowGML
                                 A QGIS plugin
 Walidator plików GML baz BDOT10k, PRNG, GESUT, EGiB, BDOT500
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-12-23
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Marcin Lebiecki - Główny Urząd Geodezji i Kartografii
        email                : marcin.lebiecki@gugik.gov.pl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import lxml
import os, subprocess
import zipfile
import pathlib
import pandas as pd
import re
import matplotlib.pyplot
import time
import xlwt 
from lxml.etree import parse, XMLSchema
from qgis.PyQt.QtCore import *
from qgis.core import *
from qgis.utils import *
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.PyQt.QtWidgets import QFileDialog
from .resources import *
from .walidatorPlikowGML_dialog import walidatorPlikowGMLDialog



class walidatorPlikowGML:

    def __init__(self, iface):
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(self.plugin_dir,'i18n','walidatorPlikowGML_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        self.actions = []
        self.menu = self.tr(u'&Walidator plików GML')
        self.first_start = None
        
        os.environ['QT_AUTO_SCREEN_SCALE_FACTOR'] = '1'
        
        global mainPath, config, dlg
        
        mainPath = pathlib.Path(QgsApplication.qgisSettingsDirPath())/pathlib.Path("python/plugins/Walidator_plikow_gml/")
        
        config = configparser.ConfigParser()
        config.read(str(mainPath)+'/Walidator_plikow_gml.ini')

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        return QCoreApplication.translate('walidatorPlikowGML', message)


    def add_action(self,icon_path,text,callback,enabled_flag=True,add_to_menu=True,add_to_toolbar=True,status_tip=None,whats_this=None,parent=None):
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)
        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)
        self.actions.append(action)
        return action


    def initGui(self):
        icon_path = ':/plugins/walidatorPlikowGML/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'walidatorPlikowGML'),
            callback=self.run,
            parent=self.iface.mainWindow())

        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Walidator plików GML'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        
        global xsdPaths
        walidowanaBaza = ['EGIB','GESUT','BDOT500','PRNG','BDOT10k','BDOO']
        formatRaportu = ['xls','txt']
        xsdPaths = {'BDOO':"/XSD/BDOT10kBDOO/BDOT10k_BDOO.xsd",
                    'BDOT10k':"/XSD\BDOT10kBDOO/BDOT10k_BDOO.xsd",
                    'PRNG':"/XSD/PRNG/NG_PRNG.xsd",
                    'BDOT500':"/XSD/BDOT500/BDOT500_1.3tech.xsd",
                    'GESUT':"/XSD/GESUT/GESUT_1.3tech.xsd",
                    'EGIB':"/XSD/EGIB/EGIB_1.6.xsd"
                   }
        
        if self.first_start == True:
            self.first_start = False
            self.dlg = walidatorPlikowGMLDialog()
        
        self.dlg.comboBox.clear()
        self.dlg.comboBox.addItems(walidowanaBaza)
        self.dlg.comboBox_2.clear()
        self.dlg.comboBox_2.addItems(formatRaportu)
        self.wskazaniePlikuIZlecenieWalidacji()

    
    # wskazanie pliku i zlecenie walidacji
    def wskazaniePlikuIZlecenieWalidacji(self):
        global pliki, sciezkaGML, files, plik, path, plikRaportu, walidacjaZWynikiemPozytywnym, xmlschema, formatPlikuRaportu, dataFrame
        global walidowanePliki_df, wiersze_df, opisyBledow_df, komunikatyBledow_df
        sciezkaGML_ini = config['UstawieniaOgolne']['sciezkagml']
        plik = QFileDialog.getOpenFileNames(self.dlg,"Wskaż plik z danymi do walidacji",sciezkaGML_ini,"Plik GML (*.gml);;Plik XML (*.xml);;Plik skompresowany (*.zip)")
        
        try:
            sciezkaGML = str(pathlib.Path(plik[0][0]).parent)
            nazwa_pliku = pathlib.Path(plik[0][0]).name[:-4]
            if sciezkaGML != sciezkaGML_ini:
                config.set('UstawieniaOgolne', 'sciezkagml', sciezkaGML)
                with open(str(mainPath)+'/Walidator_plikow_gml.ini', 'w') as configfile:
                    config.write(configfile)
        except Exception as inst:
            if inst.args[0] == 13:
                self.iface.messageBar().pushMessage("Uwaga!", inst.args[1], level=Qgis.Critical)
            else:
                pass
            return
        
        if plik[1] == 'Plik skompresowany (*.zip)':
            try:
                plikZIP = zipfile.ZipFile(plik[0][0],'r') 
            except:
                self.iface.messageBar().pushMessage("Uwaga!", "Niepoprawny plik zip.", level=Qgis.Critical)
                return
            
            files = plikZIP.namelist()
            
            if len(files): # jeżeli jest kilka plików to łączy ich nazwy do wyszukania frazy
                nazwaPlikuLubPlikow = ''.join(files)
        else:
            files = plik[0]
            nazwaPlikuLubPlikow = pathlib.Path(files[0]).name
            
        if re.search('OT_',str(nazwaPlikuLubPlikow).upper()) != None:
            self.dlg.comboBox.setCurrentIndex(self.dlg.comboBox.findText('BDOT10k'))
        if re.search('BDOT500',str(nazwaPlikuLubPlikow).upper()) != None:
            self.dlg.comboBox.setCurrentIndex(self.dlg.comboBox.findText('BDOT500'))
        if re.search('GESUT',str(nazwaPlikuLubPlikow).upper()) != None:
            self.dlg.comboBox.setCurrentIndex(self.dlg.comboBox.findText('GESUT'))
        if re.search('EGIB',str(nazwaPlikuLubPlikow).upper()) != None:
            self.dlg.comboBox.setCurrentIndex(self.dlg.comboBox.findText('EGIB'))
        
        self.dlg.show()
        result = self.dlg.exec_()
        formatPlikuRaportu = None
        if result:
            self.iface.messageBar().pushMessage("Walidacja pliku " + str(pathlib.Path(files[0]).name) + " rozpoczęta ...", level=Qgis.Info)
            QCoreApplication.processEvents()
            if self.dlg.comboBox_2.currentText() == 'txt':
                path = sciezkaGML + "/RaportBledow_" + str(nazwa_pliku) + ".txt"
                formatPlikuRaportu = "txt"
            else:
                path = sciezkaGML + "/RaportBledow_" + str(nazwa_pliku) + ".xls"
                formatPlikuRaportu = "xls"
            try:
                if os.path.isfile(path):
                    os.remove(path)
            except:
                self.iface.messageBar().pushMessage("Uwaga!", "Plik raportu jest otwarty. Proszę o zamknięcie pliku.", level=Qgis.Critical)
                return
        else:
            if formatPlikuRaportu == 'txt':
                plikRaportu.close() 
            return
        
        try:
            if formatPlikuRaportu == 'txt':
                plikRaportu = open(path,"a")
        except:
            self.iface.messageBar().pushMessage("Uwaga!", "Brak uprawnień do zapisu raportu.", level=Qgis.Critical)
            return
        
        pliki = []
        walidowanePliki_df = []
        wiersze_df = []
        opisyBledow_df = []
        komunikatyBledow_df = []
        i = 0
        walidacjaZWynikiemPozytywnym = True
        
        namespace = self.dlg.comboBox.currentText()
        
        try:
            xsdPath = parse(str(mainPath) + xsdPaths[namespace])
        except:
            self.iface.messageBar().pushMessage("Uwaga!", "Brak dostępu do pliku XSD.", level=Qgis.Critical)
            return
        
        xmlschema = XMLSchema(xsdPath)
        
        for file in files:
            if plik[1] == 'Plik skompresowany (*.zip)':
                try:
                    plikGML = plikZIP.extract(file)
                except:
                   self.iface.messageBar().pushMessage("Uwaga!", "Problem z rozpakowaniem pliku zip.", level=Qgis.Critical)
                   return 
            else:
                plikGML = file
            if plikGML[-3:] in ['xml','gml']:
                pliki.append(plikGML)
                task = QgsTask.fromFunction(str(i), self.walidacja, on_finished=self.wynikiWalidacji, flags=QgsTask.CanCancel)
                QgsApplication.taskManager().addTask(task)
                while QgsApplication.taskManager().countActiveTasks() > 0:
                    QCoreApplication.processEvents()
                while task.status() not in [QgsTask.Complete, QgsTask.Terminated]:
                    QCoreApplication.processEvents()
                i += 1

        if formatPlikuRaportu == 'txt':
            pass
        else:
            data = {'WALIDOWANY PLIK': walidowanePliki_df, 'WIERSZ': wiersze_df, 'OPIS BŁĘDU': opisyBledow_df, 'KOMUNIKAT BŁĘDU': komunikatyBledow_df}
            if len(data["WIERSZ"]) == 0:
                data["WIERSZ"] = 0
            dataFrame = pd.DataFrame(data)
            try:
                strony = xlwt.Workbook()
                arkusz = strony.add_sheet('Raport')
                style = xlwt.easyxf('align: wrap on;  borders: left thin, right thin, top thin, bottom thin')
                styl2 = xlwt.easyxf("align: horz center, vert center; font: bold on; align: wrap on; borders: left thin, right thin, top thin, bottom thin")
                arkusz.write(0,0,"WALIDOWANY PLIK", styl2) 
                arkusz.write(0,1,"WIERSZ", styl2)
                arkusz.write(0,2,"OPIS BŁĘDU", styl2)
                arkusz.write(0,3,"KOMUNIKAT BŁĘDU", styl2)
                arkusz.col(0).width = 12500    
                arkusz.col(1).width = 2000    
                arkusz.col(2).width = 22500   
                arkusz.col(3).width = 22500
                for i, row in enumerate(dataFrame.values):
                    for j, val in enumerate(row):
                        arkusz.write(i+1, j, str(val), style) 
                strony.save(path)
            except:
                self.iface.messageBar().pushMessage("Uwaga!", "Brak uprawnień do zapisu raportu.", level=Qgis.Critical)
                return
        
        if walidacjaZWynikiemPozytywnym:
            self.iface.messageBar().pushMessage("Walidacja pliku " + str(pathlib.Path(files[0]).name) + " zakończona z wynikiem pozytywnym.", Qgis.Success, 0)
        else:
            widget = iface.messageBar().createMessage("Walidacja pliku zakończona z wynikiem negatywnym: ", str(pathlib.Path(files[0]).name))
            button = QPushButton(widget)
            button.setText("Raport z walidacji")
            button.pressed.connect(self.otwarcieRaportuZWalidacji)
            widget.layout().addWidget(button)
            self.iface.messageBar().pushWidget(widget, Qgis.Warning)
        
            if formatPlikuRaportu == 'txt':
                plikRaportu.close()
        

    # walidacja pliku GML z conajmniej jednym obiektem     
    def walidacja(self, task):
        global walidacjaZWynikiemPozytywnym
        plikGML = pliki[int(task.description())]
        try:
            walidowanyPlik = lxml.etree.parse(plikGML)
            root = walidowanyPlik.getroot()
            
            if root != None:
                wynikWalidacji = xmlschema.validate(walidowanyPlik)
                if not wynikWalidacji:
                    walidacjaZWynikiemPozytywnym = False
                    return {'taskID':task.description(), 'plikGML':plikGML, 'error':xmlschema.error_log}
        except lxml.etree.XMLSyntaxError as error:
            walidacjaZWynikiemPozytywnym = False
            return {'taskID':task.description(), 'plikGML':plikGML, 'error':error}
        except OSError as error:
            walidacjaZWynikiemPozytywnym = False
            return {'taskID':task.description(), 'plikGML':plikGML, 'error':error}
    
    
    # zapisanie logów błędów walidacji do pliku; komunikat z przyciskiem pobrania raportu
    def wynikiWalidacji(self, exception=None, value=None):
        global walidowanePliki_df, wiersze_df, opisyBledow_df, komunikatyBledow_df
        
        frazy = {"The value":"Wartość",
                 "failed to load external entity":"nie udało się załadować",
                 "Error reading file":"Błąd odczytu pliku",
                 "is not an element of the set":"nie znajduje się na liście",
                 "This element is not expected":"Ten element jest nieoczekiwany",
                 "Expected is one of":"Oczekiwana jest jedna wartość z ", 
                 "Expected is":"Oczekiwany jest ",
                 "is not a valid value of the atomic type":"jest nieprawidłową wartością typu podstawowego",
                 "is not a valid value of the list type \'{http://www.opengis.net/gml/3.2}doubleList\'":" jest nieprawidłową wartością typu listowego \'{http://www.opengis.net/gml/3.2}doubleList\'",
                 "Opening and ending tag mismatch":"Błędny otwierający lub zamykający znacznik",
                 "line":"linia",
                 "and":"i",
                 "Start tag expected":"Oczekiwany tag początkowy",
                 "huge text node":"ogromny węzeł tekstowy",
                 "Point":"Punkt",
                 "column":"kolumna",
                 "is not a valid value of the union type":"jest nieprawdłową wartością typu unia",
                 "is less than the minimum value allowed":"jest mniejsza niż minimalna dozwolona wartość",
                 "Missing child element(s)":"Brakuje elementów dziecka/dzieci",
                 "EndTag":"Znacznik zamykający",
                 "must be greater than":"musi być większa niż",
                 "is not accepted by the pattern":"nie jest zgodna z paternem",
                 "is greater than the maximum value allowed":"jest większa niż maksymalna dozwolona liczba",
                 "not found": "nie został znaleziony",
                 "is not a valid value of the local atomic type":"nie jest poprawną wartością lokalnego typu podstawowego"
                 }
        if value != None:
            if  isinstance(value['error'], lxml.etree.XMLSyntaxError):
                opisBledu = str(value['error'])
                for key in frazy:
                    opisBledu = opisBledu.replace(key,frazy[key])
                msg = 'Błąd w składni pliku XML: ' + str(value['plikGML']) + '\n' + \
                      '- komunikat błędu: ' + opisBledu + '\n\n'
                if formatPlikuRaportu == 'txt':
                    plikRaportu.write(msg)
                else:
                    walidowanePliki_df.append(str(value['plikGML']))
                    wiersze_df.append("-")
                    opisyBledow_df.append("Błąd w składni pliku XML")
                    komunikatyBledow_df.append(opisBledu)
            elif isinstance(value['error'], lxml.etree._ListErrorLog):
                for i in range(len(value['error'])):
                    opisBledu = value['error'][i].message
                    for key in frazy:
                        opisBledu = opisBledu.replace(key,frazy[key]) # tłumaczenie
                    msg = 'Walidacja pliku: ' + str(value['plikGML']) + ' z wynikiem negatywnym.\n' + \
                          '- ' + config['KodyWalidacji'][value['error'][i].type_name] + '\n' + \
                          '- wiersz: ' + str(value['error'][i].line) + '\n' + \
                          '- komunikat błędu: ' + opisBledu + '\n\n'
                    if formatPlikuRaportu == 'txt':
                        plikRaportu.write(msg)
                    else:
                        walidowanePliki_df.append(str(value['plikGML']))
                        wiersze_df.append(str(value['error'][i].line))
                        opisyBledow_df.append(config['KodyWalidacji'][value['error'][i].type_name])
                        komunikatyBledow_df.append(opisBledu)
            elif isinstance(value['error'], OSError):
                opisBledu = str(value['error'])
                for key in frazy:
                    opisBledu = opisBledu.replace(key,frazy[key]) # tłumaczenie         
                if formatPlikuRaportu == 'txt':
                    plikRaportu.write(opisBledu)
                else:
                    walidowanePliki_df.append(str(value['plikGML']))
                    wiersze_df.append("-")
                    opisyBledow_df.append("-")
                    komunikatyBledow_df.append(opisBledu)


    # otwarcie pliku raportu
    def otwarcieRaportuZWalidacji(self):
        if os.path.isfile(path):
            try:
                os.startfile(path, 'open') # Windows
            except:
                subprocess.call(('open', path)) # macOS
    
    
    # kontrola atrybutów
    def kontrolaAtrybutow(self, task):
        pass